%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Tue Dec 26 17:38:08 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGUACUUAAGCCCACUGAUGAGUCGCUGGGAUGCGACGAAACGCCCAGGGCGUCUGGGCAGUACCCA\
) def
/coor [
[87.77275848 298.98776245]
[87.09004211 284.00332642]
[86.40732574 269.01885986]
[85.72460175 254.03440857]
[85.04188538 239.04995728]
[84.35916901 224.06550598]
[83.67644501 209.08103943]
[80.99706268 206.31517029]
[79.71477509 201.97949219]
[80.61726379 196.84613037]
[84.06449890 192.03819275]
[85.42852020 177.10034180]
[86.79254150 162.16249084]
[88.15656281 147.22462463]
[89.52059174 132.28677368]
[81.00354004 128.13163757]
[73.96705627 121.78393555]
[68.95954895 113.73842621]
[66.37129211 104.62216187]
[66.40402985 95.14564514]
[69.05519104 86.04747772]
[74.11815643 78.03675079]
[81.19832611 71.73781586]
[75.85469818 57.72190857]
[70.51107025 43.70599747]
[65.16744995 29.69009209]
[59.82382202 15.67418385]
[45.29990768 9.44269371]
[39.51394653 -5.26438570]
[45.89864349 -19.72160530]
[60.66607285 -25.35175133]
[75.05498505 -18.81455994]
[80.52868652 -3.98843026]
[73.83972931 10.33055878]
[79.18335724 24.34646606]
[84.52697754 38.36237335]
[89.87060547 52.37828064]
[95.21423340 66.39418793]
[104.92292023 66.41400909]
[114.22888947 69.18128967]
[122.37088776 74.46967316]
[128.68284607 81.84653473]
[142.81675720 76.82334137]
[156.95068359 71.80014801]
[171.08459473 66.77695465]
[185.21850586 61.75375748]
[198.11830139 50.75232697]
[212.26081848 60.10249710]
[207.19108582 76.28070068]
[190.24169922 75.88767242]
[176.10778809 80.91086578]
[161.97387695 85.93405914]
[147.83995056 90.95725250]
[133.70603943 95.98044586]
[126.81223297 120.81726074]
[104.45844269 133.65080261]
[103.09442139 148.58865356]
[101.73039246 163.52650452]
[100.36637115 178.46435547]
[99.00234985 193.40220642]
[98.66090393 208.39833069]
[99.34362030 223.38278198]
[100.02633667 238.36723328]
[100.70906067 253.35168457]
[101.39177704 268.33615112]
[102.07449341 283.32058716]
[102.75721741 298.30505371]
[105.82228851 317.44284058]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
