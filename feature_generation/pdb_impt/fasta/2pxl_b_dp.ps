%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Tue Dec 26 17:35:21 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (2pxl_b)
} def

/sequence { (\
CGGGUGUUUACCAGGUCAGGUCCGAAAGGAAGCAGCCAAGGCACUU\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.012120070 ubox
1 24 0.006804187 ubox
1 40 0.032086866 ubox
1 41 0.010576077 ubox
2 11 0.003796621 ubox
2 12 0.050387892 ubox
2 23 0.006927582 ubox
2 37 0.337365752 ubox
2 42 0.003901902 ubox
2 44 0.009382624 ubox
2 45 0.040308304 ubox
2 46 0.668774526 ubox
3 11 0.050315445 ubox
3 12 0.069289504 ubox
3 22 0.006915263 ubox
3 36 0.337658036 ubox
3 37 0.036357803 ubox
3 44 0.032882480 ubox
3 45 0.908729548 ubox
3 46 0.022504050 ubox
4 9 0.003470800 ubox
4 11 0.069432534 ubox
4 21 0.004182631 ubox
4 36 0.036408189 ubox
4 42 0.020376499 ubox
4 44 0.934823380 ubox
4 45 0.005083807 ubox
5 10 0.065033274 ubox
5 34 0.338664497 ubox
5 35 0.021643510 ubox
5 41 0.020296313 ubox
5 43 0.935232886 ubox
6 33 0.339854339 ubox
6 42 0.935396409 ubox
6 44 0.016983506 ubox
7 31 0.013297114 ubox
7 32 0.339084643 ubox
7 39 0.020581978 ubox
7 40 0.066229634 ubox
7 41 0.911488291 ubox
7 43 0.016770165 ubox
8 13 0.003936772 ubox
8 25 0.003262888 ubox
8 29 0.005200566 ubox
8 30 0.018605687 ubox
8 31 0.334827441 ubox
8 32 0.008424967 ubox
8 38 0.024787286 ubox
8 39 0.093415513 ubox
8 40 0.845668625 ubox
8 41 0.040866766 ubox
9 13 0.005071866 ubox
9 24 0.003482443 ubox
9 27 0.003961211 ubox
9 28 0.006758249 ubox
9 29 0.022180404 ubox
9 30 0.310368541 ubox
9 31 0.011205151 ubox
9 38 0.104607639 ubox
9 39 0.737844752 ubox
9 40 0.047736975 ubox
9 41 0.014626579 ubox
9 43 0.005118539 ubox
10 16 0.006040058 ubox
10 21 0.150771631 ubox
11 15 0.006419992 ubox
11 19 0.003853269 ubox
11 20 0.175882596 ubox
11 28 0.110744498 ubox
11 29 0.247093720 ubox
11 35 0.006729816 ubox
11 40 0.236519059 ubox
11 41 0.187425668 ubox
12 19 0.175944094 ubox
12 20 0.003336746 ubox
12 24 0.021666030 ubox
12 28 0.245293269 ubox
12 29 0.013390530 ubox
12 35 0.015945969 ubox
12 40 0.198034384 ubox
12 41 0.009261561 ubox
13 45 0.019767407 ubox
13 46 0.004771022 ubox
14 22 0.008960229 ubox
14 23 0.248071617 ubox
14 33 0.017121121 ubox
14 36 0.037706660 ubox
14 37 0.932278940 ubox
14 44 0.021102771 ubox
14 45 0.006155196 ubox
15 21 0.007434529 ubox
15 22 0.247975835 ubox
15 23 0.019058782 ubox
15 33 0.059634413 ubox
15 36 0.933830231 ubox
15 37 0.017991153 ubox
15 42 0.027212177 ubox
15 44 0.006320870 ubox
16 20 0.015861229 ubox
16 24 0.011253217 ubox
16 25 0.132908506 ubox
16 26 0.009314399 ubox
16 31 0.014568379 ubox
16 32 0.049230236 ubox
16 34 0.039534087 ubox
16 35 0.902949473 ubox
16 41 0.027225120 ubox
16 43 0.006073980 ubox
17 24 0.136276504 ubox
17 32 0.066300069 ubox
17 35 0.157042817 ubox
17 40 0.027060947 ubox
17 41 0.004085206 ubox
18 45 0.003597904 ubox
18 46 0.006835163 ubox
19 23 0.016281420 ubox
19 33 0.237852328 ubox
19 37 0.029958511 ubox
19 44 0.003835914 ubox
19 45 0.008964770 ubox
20 33 0.094083021 ubox
20 36 0.029998648 ubox
20 37 0.004853403 ubox
20 44 0.009198678 ubox
21 29 0.006152680 ubox
21 30 0.922512222 ubox
21 31 0.136672911 ubox
21 32 0.067562754 ubox
21 35 0.022432472 ubox
21 43 0.009048677 ubox
22 28 0.007254841 ubox
22 29 0.953437473 ubox
22 41 0.009829378 ubox
23 28 0.953167180 ubox
23 29 0.017578103 ubox
23 32 0.006146479 ubox
23 40 0.009886232 ubox
24 33 0.003447323 ubox
28 33 0.003428935 ubox
28 37 0.025763358 ubox
29 36 0.025725272 ubox
30 46 0.003798419 ubox
31 45 0.005618447 ubox
32 36 0.003392972 ubox
32 37 0.007628856 ubox
32 42 0.005446379 ubox
32 44 0.005786924 ubox
33 40 0.004610905 ubox
33 41 0.005457446 ubox
35 42 0.022224348 ubox
36 41 0.022293704 ubox
38 45 0.007086316 ubox
38 46 0.042740078 ubox
39 45 0.051176211 ubox
39 46 0.009398908 ubox
40 44 0.051008076 ubox
40 45 0.009954363 ubox
40 46 0.005637920 ubox
41 45 0.004982595 ubox
41 46 0.003978825 ubox
2 46 0.9500000 lbox
3 45 0.9500000 lbox
4 44 0.9500000 lbox
5 43 0.9500000 lbox
6 42 0.9500000 lbox
7 41 0.9500000 lbox
8 40 0.9500000 lbox
9 39 0.9500000 lbox
14 37 0.9500000 lbox
15 36 0.9500000 lbox
16 35 0.9500000 lbox
21 30 0.9500000 lbox
22 29 0.9500000 lbox
23 28 0.9500000 lbox
showpage
end
%%EOF
