%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Tue Dec 26 17:38:08 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (5wtk_b)
} def

/sequence { (\
ACCCCAAUAUCGAAGGGGACUAAAACGACAAAUCUAUCUGAAUAAACUC\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 21 0.032774501 ubox
1 35 0.003535055 ubox
1 39 0.003311755 ubox
1 43 0.004127687 ubox
2 16 0.005256270 ubox
2 17 0.068291726 ubox
2 18 0.988869081 ubox
3 15 0.005257277 ubox
3 16 0.068325552 ubox
3 17 0.993403583 ubox
3 18 0.089043442 ubox
4 15 0.068047120 ubox
4 16 0.993440753 ubox
4 17 0.089200010 ubox
4 18 0.008069433 ubox
5 12 0.026751277 ubox
5 15 0.992624202 ubox
5 16 0.089067020 ubox
5 17 0.008086550 ubox
6 10 0.015902886 ubox
8 12 0.049461296 ubox
8 13 0.082137669 ubox
8 14 0.056147559 ubox
8 15 0.007446608 ubox
8 44 0.004180534 ubox
9 43 0.004408052 ubox
10 14 0.015856572 ubox
10 19 0.005150557 ubox
10 28 0.005903584 ubox
10 41 0.007371333 ubox
10 42 0.003686037 ubox
11 18 0.005554691 ubox
11 27 0.006412328 ubox
11 40 0.008129882 ubox
12 26 0.006345624 ubox
12 38 0.008556472 ubox
12 39 0.004583655 ubox
13 37 0.008484846 ubox
14 21 0.006668506 ubox
14 35 0.004046176 ubox
14 39 0.004683921 ubox
15 20 0.006935258 ubox
15 34 0.004113524 ubox
15 35 0.007568749 ubox
15 38 0.004962128 ubox
16 33 0.003839696 ubox
16 34 0.007706653 ubox
16 35 0.003352348 ubox
16 37 0.003949032 ubox
17 26 0.004118632 ubox
17 33 0.007224595 ubox
17 34 0.003412923 ubox
17 35 0.006523544 ubox
18 26 0.008014748 ubox
18 29 0.008062064 ubox
18 34 0.010364218 ubox
18 38 0.007282763 ubox
19 33 0.010832314 ubox
19 35 0.006087553 ubox
19 37 0.008112384 ubox
19 39 0.006098893 ubox
19 43 0.007506158 ubox
19 48 0.005174662 ubox
20 27 0.088704579 ubox
20 40 0.040018315 ubox
21 25 0.010833684 ubox
21 27 0.017435733 ubox
21 28 0.020555034 ubox
21 30 0.020165577 ubox
21 31 0.011985416 ubox
21 32 0.009042614 ubox
21 36 0.024583655 ubox
21 40 0.030544615 ubox
21 41 0.012739056 ubox
21 42 0.007649172 ubox
21 44 0.034912953 ubox
21 45 0.008697467 ubox
21 46 0.005397666 ubox
22 33 0.005387578 ubox
22 35 0.025225973 ubox
22 37 0.005765326 ubox
22 39 0.031315569 ubox
22 43 0.034828307 ubox
22 48 0.004328876 ubox
23 33 0.007222057 ubox
23 35 0.010653976 ubox
23 37 0.014157055 ubox
23 39 0.013239859 ubox
23 43 0.012856017 ubox
23 48 0.005307143 ubox
24 33 0.017601630 ubox
24 35 0.012396219 ubox
24 37 0.020454854 ubox
24 39 0.012880800 ubox
24 43 0.009641515 ubox
24 48 0.006206256 ubox
25 33 0.008554725 ubox
25 35 0.030600000 ubox
25 37 0.010197389 ubox
25 39 0.032277297 ubox
25 43 0.010219673 ubox
25 48 0.011092284 ubox
26 40 0.078449027 ubox
27 33 0.008051240 ubox
27 34 0.234409187 ubox
27 35 0.012398862 ubox
27 37 0.004846394 ubox
27 38 0.240805351 ubox
27 39 0.045631089 ubox
27 43 0.010044968 ubox
27 47 0.076972159 ubox
27 48 0.009577730 ubox
27 49 0.057917937 ubox
28 33 0.208081541 ubox
28 35 0.020224202 ubox
28 37 0.236894001 ubox
28 39 0.010660904 ubox
28 43 0.013003275 ubox
28 48 0.056713247 ubox
29 40 0.188812105 ubox
30 35 0.065375188 ubox
30 37 0.016176101 ubox
30 39 0.186519663 ubox
30 43 0.020449841 ubox
30 48 0.006152582 ubox
31 35 0.013509776 ubox
31 37 0.017971281 ubox
31 39 0.016264711 ubox
31 43 0.100348465 ubox
31 48 0.009141458 ubox
32 37 0.028931460 ubox
32 39 0.021172232 ubox
32 43 0.084188233 ubox
32 48 0.007740140 ubox
33 40 0.008620671 ubox
33 41 0.403522967 ubox
33 42 0.068975897 ubox
33 44 0.007588393 ubox
33 45 0.011448352 ubox
33 46 0.019716029 ubox
34 40 0.432054140 ubox
35 40 0.019256104 ubox
35 41 0.019024736 ubox
35 42 0.020383726 ubox
35 44 0.121217480 ubox
35 45 0.011799443 ubox
35 46 0.008147698 ubox
36 43 0.125011779 ubox
36 48 0.006771781 ubox
37 41 0.009542276 ubox
37 42 0.114800647 ubox
37 44 0.013421028 ubox
37 45 0.009583761 ubox
37 46 0.012704381 ubox
39 44 0.017559775 ubox
39 45 0.042479878 ubox
39 46 0.042249292 ubox
40 47 0.068815170 ubox
40 48 0.009811124 ubox
40 49 0.118330267 ubox
41 48 0.115090373 ubox
42 48 0.014618993 ubox
44 48 0.008139920 ubox
2 18 0.9500000 lbox
3 17 0.9500000 lbox
4 16 0.9500000 lbox
5 15 0.9500000 lbox
showpage
end
%%EOF
