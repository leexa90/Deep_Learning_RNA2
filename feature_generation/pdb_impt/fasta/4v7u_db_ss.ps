%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Tue Dec 26 17:35:41 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCCUGGCGGCCGUAGCGCGGUGGUCCCACCUGACCCCAUGCCGAACUCAGAAGUGAAACGCCGUAGCGCCGAUGGUAGUGUGGGGUCUCCCCAUGCGAGAGUAGGGAACUGCCAGGC\
) def
/coor [
[91.65671539 259.05819702]
[91.65671539 244.05819702]
[91.65671539 229.05819702]
[91.65671539 214.05819702]
[91.65671539 199.05819702]
[91.65671539 184.05819702]
[91.65671539 169.05819702]
[91.65671539 154.05819702]
[91.65671539 139.05819702]
[77.83703613 133.22583008]
[67.09017944 143.69030762]
[56.34333038 154.15476990]
[45.59648132 164.61924744]
[38.46654510 180.00106812]
[21.71208954 177.40788269]
[19.56583786 160.59033203]
[35.13200760 153.87239075]
[45.87886047 143.40792847]
[56.62570953 132.94345093]
[67.37255859 122.47898102]
[68.10277557 117.76145935]
[69.40974426 113.40006256]
[54.66947937 116.17939758]
[39.92921829 118.95872498]
[25.48467445 127.83518219]
[12.95646667 116.41237640]
[20.46470642 101.21163177]
[37.14988708 104.21846008]
[51.89015198 101.43913269]
[66.63040924 98.65980530]
[74.57626343 78.34453583]
[93.36898041 67.26844025]
[93.76828766 52.27375412]
[94.16759491 37.27907181]
[94.56690216 22.28438568]
[94.96620941 7.28970194]
[95.36551666 -7.70498228]
[95.76483154 -22.69966698]
[96.16413879 -37.69435120]
[96.56344604 -52.68903351]
[96.96275330 -67.68371582]
[88.92699432 -75.25144958]
[86.50434113 -85.79376221]
[90.27317047 -95.69674683]
[98.73145294 -101.70441437]
[99.92824554 -116.65659332]
[97.47161102 -125.59091187]
[101.36112213 -131.98913574]
[102.95552826 -146.90415955]
[91.61443329 -157.32940674]
[88.62166595 -172.25912476]
[94.91942596 -185.92669678]
[107.90219116 -193.17829895]
[109.49658966 -208.09332275]
[111.09099579 -223.00834656]
[101.44153595 -235.23641968]
[103.27095795 -250.33966064]
[114.98802948 -259.46356201]
[116.58242798 -274.37860107]
[112.25393677 -290.77069092]
[126.80717468 -299.46780396]
[139.19313049 -287.89089966]
[131.49745178 -272.78421021]
[129.90304565 -257.86917114]
[139.42671204 -246.47463989]
[138.02223206 -231.32597351]
[126.00601959 -221.41394043]
[124.41161346 -206.49891663]
[122.81721497 -191.58389282]
[133.97375488 -181.75181580]
[137.24011230 -167.06185913]
[131.15908813 -153.10211182]
[117.87054443 -145.30975342]
[116.27614594 -130.39472961]
[114.88042450 -115.45980835]
[113.68363190 -100.50762177]
[123.32064056 -83.83154297]
[111.95743561 -67.28440857]
[111.55812836 -52.28972626]
[111.15882111 -37.29504395]
[110.75951385 -22.30035973]
[110.36020660 -7.30567455]
[109.96089935 7.68900967]
[109.56159210 22.68369293]
[109.16228485 37.67837906]
[108.76296997 52.67306137]
[108.36366272 67.66774750]
[123.61650085 76.38673401]
[132.33340454 91.64075470]
[132.10192871 109.20822906]
[145.22337341 116.47649384]
[158.34481812 123.74475861]
[167.49583435 125.19942474]
[171.71508789 131.38517761]
[184.63839722 139.00016785]
[197.56170654 146.61514282]
[213.95608521 146.21954346]
[222.26371765 160.35867310]
[213.93843079 174.48742676]
[197.54455566 174.07135010]
[189.94671631 159.53846741]
[177.02340698 151.92347717]
[164.10009766 144.30848694]
[151.07656860 136.86619568]
[137.95510864 129.59794617]
[124.83367157 122.32967377]
[120.47221375 128.96743774]
[114.34481049 134.69813538]
[106.65671539 139.05819702]
[106.65671539 154.05819702]
[106.65671539 169.05819702]
[106.65671539 184.05819702]
[106.65671539 199.05819702]
[106.65671539 214.05819702]
[106.65671539 229.05819702]
[106.65671539 244.05819702]
[106.65671539 259.05819702]
] def
/pairs [
[1 117]
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 20]
[11 19]
[12 18]
[13 17]
[22 30]
[23 29]
[24 28]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[39 80]
[40 79]
[41 78]
[45 76]
[46 75]
[48 74]
[49 73]
[53 69]
[54 68]
[55 67]
[58 64]
[59 63]
[90 106]
[91 105]
[92 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
